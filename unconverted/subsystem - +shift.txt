================================================================================
== SHEET ATTRIBUTES ============================================================

Current form ('null' = human/Hishu):

&_form.current <sheet>: <current form>
&_form.options <sheet>: <list.of.valid.forms>
&_form.offsets <sheet>: <statpath>:+/-<offset>

	a list of what was *actually* set on the sheet, due to special rules
	that attributes shouldn't be offset lower than 1.

The "valid forms" is typically only for non-Werewolves who may change into new forms.  They must(?)/should(?) have a &form.<form name>.<...> set on the object(?) or &_form.<name>.<...> on themselves(?).

We'll see where this gets to.


================================================================================
== DATA ========================================================================

&d.sfp sfs=#204
&d.health sfs=#205

&d.forms.werewolf sfs=Hishu.Dalu.Gauru.Urshal.Urhan
&d.forms.skinthief sfs=Human.*
&d.forms.changeling sfs=Human.*


================================================================================
== FORMS PACKETS ===============================================================

Format: &d.form.<form name>.<directive>: We won't be using this as an index, so we can easily use it as a more legible pseudo-<statpath>+<info>.

Per-player "packets" may also need to be built, or some way to validate that a player can turn into form "xxx".  &_form.current records current form only.
	
Offsets - <statpath>:+/-<value>
	What to increase/decrease. +/-: change by, value: change to.

Notes - Things you might want to know

--

&form.human.offsets sfs=@@('human' === 'default' === 'null')
&form.human.oshift sfs=returns back to %p normal form.

--

&form.Hishu.offsets sfs=@@(nothing special)
&form.Hishu.oshift sfs=returns back to %p human (Hishu) form.

-

&form.dalu.offsets sfs=attribute.strength:+1 attribute.stamina:+1 attribute.manipulation:-1 advantage.size:+1

&form.dalu.notes sfs=Lunacy (+4 to resist), +2 perception

&form.dalu.oshift sfs=changes to %p near-man (dalu) form.


-

&form.gauru.offsets sfs=attribute.strength:+3 attribute.dexterity:+1 attribute.stamina:+2 advantage.size:+2

&form.gauru.notes sfs=Rage, Lunacy, ignore wound penalties, no rolls for unconsciousness, lethal damage with claws (+1) and bite (+2), +1 for natural armor, fail most mental/social rolls, -2 for Death Rage rolls, +3 perception

&form.gauru.oshift sfs=changes to %p gauru war-form. [switch(rand(10), 0, Rar!)]

-

&form.urshal.offsets sfs=attribute.strength:+2 attribute.dexterity:+2 attribute.stamina:+2 attribute.manipulation:-3 advantage.size:+1 special.species_factor:+3

&form.urshal.notes sfs=Lunacy (+2 to resist), lethal damage with bite (+2), +3 perception

&form.urshal.oshift sfs=changes to %p near-wolf (urshal) form.

-

&form.urhan.offsets sfs=attribute.dexterity:+2 attribute.stamina:+1 special.species_factor:+3 advantage.size:-1

&form.urhan.notes sfs=Lethal damage with bite (+2), +4 perception

&form.urhan.oshift sfs=changes to %p wolf (urhan) form.

================================================================================
== FUNCTIONS ===================================================================

&f.default-form sfs=switch(%0, *Werewolf*, Hishu, Human)


--------------------------------------------------------------------------------
-- Calculate Offsets -----------------------------------------------------------

Calculate the proper offset: Attributes no lower than 1, others no lower than 0

If Increases:
	You can always increase.

If Decreases:
	Cannot go below 1.  So offset by: 
		-[min( |<amount to reduce>|, <stat> - <lowest possible value of stat> )]
	which for attributes is...
		-[min(abs(<reduction>), sub(<stat>, 1))]

0: sheet dbref
1: sheet statpath:value to increase/decrease

q1: sheet statpath
q2: value to increase/decrease

qm: minumum that stat can be (attr: 1, others: 0)
qs: stat.from.sheet
qc: stat's current total value (perm + offset)
qo: calculated offset
qt: total new offset

(I know I don't need case() here, but I suspect I'll need to add to this)


&f.offset.calculate sfs=
localize(

	[setq(1, first(%1, :))][setq(2, rest(%1, :))]
@@ qs: stat from sheet - qc: current total stat
	[setq(s, u(%0/_%q1))][setq(c, ladd(%qs, .))]

@@ qm: minimum stat can be - pretty straightforward, room here to expand
	[setq(m, 
		switch(%1,
			attribute.*, 1, 
			0
		)
	)]

@@ qo: calculate actual offset from requested offset
@@ (I don't need case() here, but I suspect I'll need to add to this)
	[setq(o, 
		case(1, 
@@ adding offset - no problem
			gte(%q2, 0), %q2,
@@ subtracting offset - cannot be lower than Min For Stat (%qm)
			lt(%q2, 0), 
			-[min(abs(%q2), sub(%qc, %qm))]
		)
	)]

@@ qt: total (new) offset
	[setq(t, add(rest(%qs, .), %qo))]

@@ return <statpath>:<offset> - if total offset = 0, return offset of 'null'
	%q1:[if(neq(%qt, 0), %qt)]

)

--

&f.offset.calculate sfs=localize([setq(1, first(%1, :))][setq(2, rest(%1, :))][setq(s, u(%0/_%q1))][setq(c, ladd(%qs, .))][setq(m, switch(%1,attribute.*, 1, 0))][setq(o, case(1, gte(%q2, 0), %q2,lt(%q2, 0), -[min(abs(%q2), sub(%qc, %qm))]))][setq(t, add(rest(%qs, .), %qo))]%q1:[if(neq(%qt, 0), %qt)])



================================================================================
== +SHIFT ======================================================================

Thenomain : @@ check for approval stamp
Thenomain : @@ check for &d.forms.<template>
Thenomain : @@ check for & name-complete on u(d.forms.<template>)
Thenomain : @@ check current form different than requested
Thenomain : @@ announce shift
Thenomain : @@ delete old-form offsets
Thenomain : @@ add new-form offsets
Thenomain : @@ check for overspill in health
Thenomain : @@ .. if overspill, trigger notice

We are doing all this by hand and not via getstat()/setstat() because we need to grab a lot of stuff directly from _special.* and we might as well bypass the system.


q0: trimmed whatever
qs: sheet loc
qc: current form or default for template if unset
qt: valid forms for sheet's template <- expand to user-defined later
qf: full name of matched form

&c.shift sfs=$+shift*: @pemit %#=
	[setq(0, trim(%0))]
	[setq(s, u([v(d.sfp)]/f.find-sheet, %#))]
	[setq(c, udefault(%qs/_form.current, u(f.default-form, u(%qs/_bio.template))))]
	[setq(t, setunion(iter(u(%qs/_bio.template), u(d.forms.%i0), ., .), , .))]
	[setq(f, grab(.%qt, %q0*, .))]

	[case(0, 

@@ error check: approval stamp exist
		isapproved(%#, approved), 
		[alert(shift)] You may not use this command until approved., 

@@ error check: &d.forms.<template> exists
		strlen(%qt), 
		[alert(shift)] Your template cannot +shift., 

@@ if just +shift, return valid + form
		strlen(%q0), 
		[alert(shift)] Valid Forms: [itemize(%qt, .)]%r
		[space(7)] You are in form: %qc
		[if(hasattr(%!, form.%qc.notes), %r[wrap(Notes: [u(form.%qc.notes)], 78, left, space(8))])], 

@@ error check: %qf (matched form) returned valid
		t(%qf), 
		[alert(shift)] I don't have a record of that form., 

@@ error check: current form different than requested
		comp(%qc, %qf), 
		[alert(shift)] You are already in %qc., 

@@ GOOD! Push data to "workhorse"
		u(f.shift-workhorse, %qs, %qc, %qf)
	)]

--

&c.shift sfs=$+shift*: @pemit %#=[setq(0, trim(%0))][setq(s, u([v(d.sfp)]/f.find-sheet, %#))][setq(c, udefault(%qs/_form.current, u(f.default-form, u(%qs/_bio.template))))][setq(t, setunion(iter(u(%qs/_bio.template), u(d.forms.%i0), ., .), , .))][setq(f, grab(.%qt, %q0*, .))][case(0, isapproved(%#, approved), [alert(shift)] You may not use this command until approved., strlen(%qt), [alert(shift)] Your template cannot +shift., strlen(%q0), [alert(shift)] Valid Forms: [itemize(%qt, .)]%r[space(strlen(alert(shift)))] You are in form: %qc[if(hasattr(%!, form.%qc.notes), %r[wrap(Notes: [u(form.%qc.notes)], 78, left, space(8))])], t(%qf), [alert(shift)] I don't have a record of that form., comp(%qc, %qf), [alert(shift)] You are already in %qc., u(f.shift-workhorse, %qs, %qc, %qf))]

--------------------------------------------------------------------------------
-- +SHIFT WORKHORSE ------------------------------------------------------------

Notable line ("offset" from shiftstat)
		of*, 
		ulocal(f.setstat.workhorse, 
			<sheet dbref>, <statpath>, <new offset>, offset
		), 


0: sheet dbref
1: form from
2: form to

qo: offsets to set on &_form.offsets
qc: current sheet stat
qe: errors to display

qh: pre-shift health (bashing lethal agg)
qn: post-shift health (bashing lethal agg)

--

&f.shift-workhorse sfs=
@@ -- FROM: 
	[iter(
		u(%0/_form.offsets), 
		[setq(e, 
			ulocal(
				[u(d.sfp)]/f.setstat.workhorse, 
				%0, 
				first(%i0, :), 
				add(rest(u(%0/_[first(%i0, :)]), .), mul(rest(%i0, :), -1)), 
				offset
			)
		)]
@@ .. errors?
		[if(t(%qe), @@(OK!), [alert(shift)] Error: %qe %r)]
		, , @@
	)]


@@ -- TO: 
	[setq(o, iter(u(form.%2.offsets), u(f.offset.calculate, %0, %i0)))]

	[iter(
		%qo, 
		[setq(e, 
			ulocal(
				[u(d.sfp)]/f.setstat.workhorse, 
				%0, 
				first(%i0, :), 
				add(rest(u(%0/_[first(%i0, :)]), .), rest(%i0, :)), 
				offset
			)
		)]
@@ .. errors?
		[if(t(%qe), @@(OK!), [alert(shift)] Error: %qe %r)]
		, , @@
	)]

@@ -- SET FORM
	[set(%0, _form.current:%2)]
	[case(u(%0/_form.current), %qf, @@(OK), [alert(shift)] Error: Current form not set. %r)]

@@ -- REMEMBER OFFSETS
	[set(%0, _form.offsets:%qo)]
	[case(u(%0/_form.offsets), %qo, @@(OK!), [alert(shift)] Error: Actual offsets not remembered.)]

@@ -- ANNOUNCE OSHIFT: if on them, use that, else use default
	[pemit(lcon(loc(%#), connect), 
		[alert(shift)] %N 
		[if(
			hasattr(%#, oshift.%2), 
			objeval(%#, u(oshift.%2)), 
			u(form.%2.oshift)
		)]
	)]

@@ -- SET HEALTH
	[setq(h, iter(bashing lethal aggravated, u(%0/_health.%i0)))]
	[setq(n, 
		u(
			[v(d.health)]/f.reverse-max-health, 				u(%0/_health.maximum), %qh
		)
	)]

@@ .. if there's a change in health, set it, else ignore it
	[if(neq(comp(%qh, %qn), 0), 
			[iter(
				bashing lethal aggravated, 
				set(%0, _health.%i0:[extract(%qn, inum(), 1)])
			)]

@@ -- ANNOUNCE HEALTH: if changed
		[pemit(lcon(loc(%#), connect), 
			[alert(shift)] 
			[u(
				[v(d.health)]/f.display-current-health-descr, 
				%#, %qn, [u(%0/_health.maximum)]
			)]
		)]
	)]

@@ -- TRIGGER ASHIFT.<form>: if applicable
		[if(hasattr(%#, ashift.%2), trigger(%#/ashift.%2, %1))]


--

&f.shift-workhorse #3029=[iter(u(%0/_form.offsets), [setq(e, ulocal([u(d.sfp)]/f.setstat.workhorse, %0, first(%i0, :), add(rest(u(%0/_[first(%i0, :)]), .), mul(rest(%i0, :), -1)), offset))][if(t(%qe), @@(OK!), [alert(shift)] Error: %qe %r)], , @@)][setq(o, iter(u(form.%2.offsets), u(f.offset.calculate, %0, %i0)))][iter(%qo, [setq(e, ulocal([u(d.sfp)]/f.setstat.workhorse, %0, first(%i0, :), add(rest(u(%0/_[first(%i0, :)]), .), rest(%i0, :)), offset))][if(t(%qe), @@(OK!), [alert(shift)] Error: %qe %r)], , @@)][set(%0, _form.current:%2)][case(u(%0/_form.current), %qf, @@(OK), [alert(shift)] Error: Current form not set. %r)][set(%0, _form.offsets:%qo)][case(u(%0/_form.offsets), %qo, @@(OK!), [alert(shift)] Error: Actual offsets not remembered.)][pemit(lcon(loc(%#), connect), [alert(shift)] %N [if(hasattr(%#, oshift.%2), objeval(%#, u(oshift.%2)), u(form.%2.oshift))])][setq(h, iter(bashing lethal aggravated, u(%0/_health.%i0)))][setq(n, u([v(d.health)]/f.reverse-max-health, u(%0/_health.maximum), %qh))][if(neq(comp(%qh, %qn), 0), [iter(bashing lethal aggravated, set(%0, _health.%i0:[extract(%qn, inum(), 1)]))][pemit(lcon(loc(%#), connect), [alert(shift)] [u([v(d.health)]/f.display-current-health-descr, %#, %qn, [u(%0/_health.maximum)])])])][if(hasattr(%#, ashift.%2), trigger(%#/ashift.%2, %1))]


================================================================================
== +SHIFT/ABOUT ================================================================

+shift/about: 
+shift/about <form>: Notes about that form


================================================================================
== HELP: Temporary =============================================================

&help~IC_Commands~+shift #96=Shifting Forms~

*** +shift is still in development ***%r %r

[ansi(h, +shift)]: Return what forms you can shift into, your current form, and any notes concerning it.%r%r

[ansi(h, +shift <form>)]: Shift into that form.  Most stat changes will be noted as offsets (with original stats in parenthesis on your +sheet).  This will also report to the room the shift and any damage rollover that might happen because of it.%r%r

You may set your own shift messages using [ansi(h, &oshift.<form>)], and add code to your shifts by using [ansi(h, &ashift.<form>)].  Note that the former works like any @o* attribute (odrop, osucc, etc.) in that your name will be automatically prepended.%r%r

e.g. %r
%b %b &oshift.dalu me=twists into a hideous 7' tall man.
%b %b &ashift.dalu me=@set/quiet me=desc:It's hideous!

--

&help~IC_Commands~+shift #96=Shifting Forms~*** +shift is still in development ***%r %r[ansi(h, +shift)]: Return what forms you can shift into, your current form, and any notes concerning it.%r%r[ansi(h, +shift <form>)]: Shift into that form.  Most stat changes will be noted as offsets (with original stats in parenthesis on your +sheet).  This will also report to the room the shift and any damage rollover that might happen because of it.%r%rYou may set your own shift messages using [ansi(h, &oshift.<form>)], and add code to your shifts by using [ansi(h, &ashift.<form>)].  Note that the former works like any @o* attribute (odrop, osucc, etc.) in that your name will be automatically prepended.%r%re.g. %r%b %b &oshift.dalu me=twists into a hideous 7' tall man.%r%b %b &ashift.dalu me=@set/quiet me=desc:It's hideous!